version: "3.3"
services:
  drone.server:
    image: drone/drone:latest
    container_name: drone.server
    ports:
      - "1380:80"
    volumes:
      - ./data/drone:/data:rw
    restart: always
    environment:
      - DRONE_GITEA_CLIENT_ID=${GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${GITEA_CLIENT_SECRET}
      - DRONE_GITEA_SERVER=${GITEA_SERVER}
      - DRONE_DEBUG=true
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_TLS_AUTOCERT=false
      - DRONE_USER_CREATE=username:${DRONE_USER_ADMIN},admin:true
      - TZ=${TIMEZONE}
    restart: always
    networks:
      - dronenet

  drone.agent:
    image: drone/drone-runner-docker:latest
    container_name: drone.agent
    restart: always
    depends_on:
      - drone.server
    ports:
      - "3000:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone.server
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_DEBUG=true
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_NOCOLOR=false
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
      - DRONE_RUNNER_NAME=DRONE_RUNNER
      - TZ=${TIMEZONE}
    restart: always
    networks:
      - dronenet

networks:
  dronenet:
